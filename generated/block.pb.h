// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
namespace bchain {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace bchain
PROTOBUF_NAMESPACE_OPEN
template<> ::bchain::Block* Arena::CreateMaybeMessage<::bchain::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bchain {

// ===================================================================

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bchain.Block) */ {
 public:
  inline Block() : Block(nullptr) {};
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bchain.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionListFieldNumber = 5,
    kProofFieldNumber = 2,
    kPreviousHashFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kIdFieldNumber = 1,
    kPreviousBlockIdFieldNumber = 4,
  };
  // repeated .bchain.Transaction transactionList = 5;
  int transactionlist_size() const;
  private:
  int _internal_transactionlist_size() const;
  public:
  void clear_transactionlist();
  ::bchain::Transaction* mutable_transactionlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bchain::Transaction >*
      mutable_transactionlist();
  private:
  const ::bchain::Transaction& _internal_transactionlist(int index) const;
  ::bchain::Transaction* _internal_add_transactionlist();
  public:
  const ::bchain::Transaction& transactionlist(int index) const;
  ::bchain::Transaction* add_transactionlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bchain::Transaction >&
      transactionlist() const;

  // optional string proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const std::string& proof() const;
  void set_proof(const std::string& value);
  void set_proof(std::string&& value);
  void set_proof(const char* value);
  void set_proof(const char* value, size_t size);
  std::string* mutable_proof();
  std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proof();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proof(
      std::string* proof);
  private:
  const std::string& _internal_proof() const;
  void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // optional string previous_hash = 3;
  bool has_previous_hash() const;
  private:
  bool _internal_has_previous_hash() const;
  public:
  void clear_previous_hash();
  const std::string& previous_hash() const;
  void set_previous_hash(const std::string& value);
  void set_previous_hash(std::string&& value);
  void set_previous_hash(const char* value);
  void set_previous_hash(const char* value, size_t size);
  std::string* mutable_previous_hash();
  std::string* release_previous_hash();
  void set_allocated_previous_hash(std::string* previous_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_previous_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_previous_hash(
      std::string* previous_hash);
  private:
  const std::string& _internal_previous_hash() const;
  void _internal_set_previous_hash(const std::string& value);
  std::string* _internal_mutable_previous_hash();
  public:

  // optional .bchain.TimeStamp timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::bchain::TimeStamp& timestamp() const;
  ::bchain::TimeStamp* release_timestamp();
  ::bchain::TimeStamp* mutable_timestamp();
  void set_allocated_timestamp(::bchain::TimeStamp* timestamp);
  private:
  const ::bchain::TimeStamp& _internal_timestamp() const;
  ::bchain::TimeStamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::bchain::TimeStamp* timestamp);
  ::bchain::TimeStamp* unsafe_arena_release_timestamp();

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 previous_block_id = 4;
  bool has_previous_block_id() const;
  private:
  bool _internal_has_previous_block_id() const;
  public:
  void clear_previous_block_id();
  ::PROTOBUF_NAMESPACE_ID::int64 previous_block_id() const;
  void set_previous_block_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_previous_block_id() const;
  void _internal_set_previous_block_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bchain.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bchain::Transaction > transactionlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_hash_;
  ::bchain::TimeStamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 previous_block_id_;
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// optional int64 id = 1;
inline bool Block::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Block::has_id() const {
  return _internal_has_id();
}
inline void Block::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::id() const {
  // @@protoc_insertion_point(field_get:bchain.Block.id)
  return _internal_id();
}
inline void Block::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Block::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bchain.Block.id)
}

// optional string proof = 2;
inline bool Block::_internal_has_proof() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Block::has_proof() const {
  return _internal_has_proof();
}
inline void Block::clear_proof() {
  proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Block::proof() const {
  // @@protoc_insertion_point(field_get:bchain.Block.proof)
  return _internal_proof();
}
inline void Block::set_proof(const std::string& value) {
  _internal_set_proof(value);
  // @@protoc_insertion_point(field_set:bchain.Block.proof)
}
inline std::string* Block::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:bchain.Block.proof)
  return _internal_mutable_proof();
}
inline const std::string& Block::_internal_proof() const {
  return proof_.Get();
}
inline void Block::_internal_set_proof(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_proof(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  proof_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bchain.Block.proof)
}
inline void Block::set_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bchain.Block.proof)
}
inline void Block::set_proof(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bchain.Block.proof)
}
inline std::string* Block::_internal_mutable_proof() {
  _has_bits_[0] |= 0x00000001u;
  return proof_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_proof() {
  // @@protoc_insertion_point(field_release:bchain.Block.proof)
  if (!_internal_has_proof()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return proof_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bchain.Block.proof)
}
inline std::string* Block::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bchain.Block.proof)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return proof_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_proof(
    std::string* proof) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proof != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proof_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proof, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bchain.Block.proof)
}

// optional string previous_hash = 3;
inline bool Block::_internal_has_previous_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Block::has_previous_hash() const {
  return _internal_has_previous_hash();
}
inline void Block::clear_previous_hash() {
  previous_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Block::previous_hash() const {
  // @@protoc_insertion_point(field_get:bchain.Block.previous_hash)
  return _internal_previous_hash();
}
inline void Block::set_previous_hash(const std::string& value) {
  _internal_set_previous_hash(value);
  // @@protoc_insertion_point(field_set:bchain.Block.previous_hash)
}
inline std::string* Block::mutable_previous_hash() {
  // @@protoc_insertion_point(field_mutable:bchain.Block.previous_hash)
  return _internal_mutable_previous_hash();
}
inline const std::string& Block::_internal_previous_hash() const {
  return previous_hash_.Get();
}
inline void Block::_internal_set_previous_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  previous_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block::set_previous_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  previous_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bchain.Block.previous_hash)
}
inline void Block::set_previous_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  previous_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bchain.Block.previous_hash)
}
inline void Block::set_previous_hash(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  previous_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bchain.Block.previous_hash)
}
inline std::string* Block::_internal_mutable_previous_hash() {
  _has_bits_[0] |= 0x00000002u;
  return previous_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block::release_previous_hash() {
  // @@protoc_insertion_point(field_release:bchain.Block.previous_hash)
  if (!_internal_has_previous_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return previous_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_previous_hash(std::string* previous_hash) {
  if (previous_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bchain.Block.previous_hash)
}
inline std::string* Block::unsafe_arena_release_previous_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bchain.Block.previous_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return previous_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Block::unsafe_arena_set_allocated_previous_hash(
    std::string* previous_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (previous_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      previous_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bchain.Block.previous_hash)
}

// optional int64 previous_block_id = 4;
inline bool Block::_internal_has_previous_block_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Block::has_previous_block_id() const {
  return _internal_has_previous_block_id();
}
inline void Block::clear_previous_block_id() {
  previous_block_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_previous_block_id() const {
  return previous_block_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::previous_block_id() const {
  // @@protoc_insertion_point(field_get:bchain.Block.previous_block_id)
  return _internal_previous_block_id();
}
inline void Block::_internal_set_previous_block_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  previous_block_id_ = value;
}
inline void Block::set_previous_block_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_previous_block_id(value);
  // @@protoc_insertion_point(field_set:bchain.Block.previous_block_id)
}

// repeated .bchain.Transaction transactionList = 5;
inline int Block::_internal_transactionlist_size() const {
  return transactionlist_.size();
}
inline int Block::transactionlist_size() const {
  return _internal_transactionlist_size();
}
inline ::bchain::Transaction* Block::mutable_transactionlist(int index) {
  // @@protoc_insertion_point(field_mutable:bchain.Block.transactionList)
  return transactionlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bchain::Transaction >*
Block::mutable_transactionlist() {
  // @@protoc_insertion_point(field_mutable_list:bchain.Block.transactionList)
  return &transactionlist_;
}
inline const ::bchain::Transaction& Block::_internal_transactionlist(int index) const {
  return transactionlist_.Get(index);
}
inline const ::bchain::Transaction& Block::transactionlist(int index) const {
  // @@protoc_insertion_point(field_get:bchain.Block.transactionList)
  return _internal_transactionlist(index);
}
inline ::bchain::Transaction* Block::_internal_add_transactionlist() {
  return transactionlist_.Add();
}
inline ::bchain::Transaction* Block::add_transactionlist() {
  // @@protoc_insertion_point(field_add:bchain.Block.transactionList)
  return _internal_add_transactionlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bchain::Transaction >&
Block::transactionlist() const {
  // @@protoc_insertion_point(field_list:bchain.Block.transactionList)
  return transactionlist_;
}

// optional .bchain.TimeStamp timestamp = 6;
inline bool Block::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Block::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::bchain::TimeStamp& Block::_internal_timestamp() const {
  const ::bchain::TimeStamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bchain::TimeStamp*>(
      &::bchain::_TimeStamp_default_instance_);
}
inline const ::bchain::TimeStamp& Block::timestamp() const {
  // @@protoc_insertion_point(field_get:bchain.Block.timestamp)
  return _internal_timestamp();
}
inline void Block::unsafe_arena_set_allocated_timestamp(
    ::bchain::TimeStamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bchain.Block.timestamp)
}
inline ::bchain::TimeStamp* Block::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bchain::TimeStamp* Block::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bchain.Block.timestamp)
  _has_bits_[0] &= ~0x00000004u;
  ::bchain::TimeStamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::bchain::TimeStamp* Block::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000004u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::bchain::TimeStamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::bchain::TimeStamp* Block::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:bchain.Block.timestamp)
  return _internal_mutable_timestamp();
}
inline void Block::set_allocated_timestamp(::bchain::TimeStamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bchain.Block.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
